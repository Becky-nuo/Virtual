OpenStack：
    含义:
        Openstack是美国国家宇航局（NASA）和Rackspace合作开发的，旨在为公有云和私有云提供软件的开源项目；
	    
        Openstack既是一个社区，也是一个项目和一个开源软件，它提供了一个部署云的操作平台工工具集，其宗旨在于，
        帮助组织运行为虚拟计算或存储服务的云，为公有云、私有云或其他云提供可扩展的、灵活的云计算；

        OpenStack是开源云操作系统，可控制整个数据中心的大型计算，存储和网络资源池，用户能够通过Web界面命令行或API接口配置资源；


    Openstack的设计与开发理念：
	    基本设计思想：开放、灵活、可扩展；
            开放：开源，并尽最大可能重用已有开源项目；
            灵活：不使用任何不可替代的私有/商业组件，使用插件化方式进行架构设计与实现；
            可扩展：由多个相互独立的项目组成，每个项目包含多个独立服务组件，无中心架构；
            代码：约70%的代码（核心逻辑）使用python开发；

    
    误区：
        OpenStack等于虚拟化：
            Openstack不是虚拟化，Openstack只是系统的控制面，不包括系统的数据面组件，如hypervisor、存储和网络设备等；

            OpenStack、云计算和虚拟化的区别:
                OpenStack:
                    自身不提供虚拟化技术；
                    调用多种技术实现多资源池管理；
                    对外提供统一管理接口；

                云计算：
                    IT能力服务化；
                    按需使用，按量计费；
                    多租户隔离；

                虚拟化:
                    环境隔离,资源复用；
                    降低隔离损耗,提升运行效率；
                    提供高级虚拟化特性；

        Openstack等于云：Openstack不是云，Openstack只是构建云的关键组件；

    
    Openstack的基础架构：
        
        Openstack的核心系统架构：
            云计算离不开虚拟化，虚拟化是云计算的基层；
            虚拟化所虚拟的，不外就是CPU、内存、磁盘、操作系统、网络等基础资源；
            Openstack的各个组件功能，都是围绕管理和调试这些虚拟资源所开发的；


        Openstack的基础架构：由Keystone，Nova，Neutron，Glance，Cinder/Swift组成核心的架构；
            认证服务(KeyStone)：
                KeyStone:认证服务,首次出现在OpenStack的	Essex版本里；
                简介:KeyStone提供身份验证，服务发现和分布式多租户授权,KeyStone支持LDAP、OAuth、OpenID Connect、SAML和SQL；
                依赖的OenStack服务:不依赖其他OpenStack服务,为其他OpenStack服务提供认证支持；


            计算服务(Nova)：
                Nova:计算服务，首次出现在OpenStack的Austin版本中；
                简介:
                    Nova提供大规模、可扩展、按需自助服务的计算资源；
                    Nova支持管理裸机,虚拟机和容器；
                依赖的OpenStack服务:KeyStone、Neutron、Glance；


            网络服务(Neutron)：
                Neutron:网络服务,首次出现在OpenStack的Folsom版本中；
                简介:Neutron负责管理虚拟网络组件,专注于为OpenStack提供网络即服务；
                依赖的OpenStack服务: KeyStone；


            操作界面(Horizon)：
                Horizon:操作界面,首次出现在OpenStack的Essex版本里；
                简介:Horizon提供基于Web的控制界面，使云管理员和用户能够管理各种OpenStack资源和服务；
                依赖的OpenStack服务: KeyStone；


            镜像服务(Glance)：
                Glance:镜像服务,首次出现在OpenStack的Bexar版本中；
                简介:
                    Glance提供发现、注册和检索虚拟机镜像功能；
                    Glance提供的虚拟机实例镜像可以存放在不同地方，例如本地文件系统、对象存储、块存储等；
                依赖的OpenStack服务: KeyStone



            块存储服务(Cinder)：
                Cinder:块存储服务，首次出现在OpenStack的Folsom版本中；
                简介:
                    Cinder提供块存储服务，为虚拟机实例提供持久化存储；
                    Cinder调用不同存储接口驱动，将存储设备转化成块存储池；
                依赖的OpenStack服务: KeyStone；

            

            编排服务(Heat)：
                Heat:编排服务,首次出现在OpenStack的Havana版本中；
                简介:
                    Heat为云应用程序编排openStack基础架构资源；
                    Heat提供OpenStack原生Rest API和CloudFormation兼容的查询API；
                依赖的OpenStack服务: KeyStone；

        
        Openstack核心组件的功能：
            Identity：认证管理组件，这里指的是Keystone组件，负责身份认证与鉴权；
            Compute：计算管理组件，这里指的是Nova组件，负责虚拟机的管理工作；
            Image：镜像管理组件，这里指的是Glance组件。负责虚拟机镜像的管理；
            
            Network：网络管理组件，这里指的是Neutron组件，负责虚拟网络的管理；
            Block Storage：块存储管理组件，这里指的是Cinder组件，负责后端块存储的管理；
            Object Storage：对象存储管理组件，这里指的是Swift组件，负责对象存储的管理；
            Dashboard：用户交互管理组件，这里指的是Horizon组件，提供用户交互操作管理；


        Openstack其他组件功能：（初衷）
            Ceilometer：监控Openstack系统性能使用情况，商业化一般用来实现计费功能；
            Heat：编排组件，主要用来实现自动化部署应用；


        Openstack各组件间的关系：
            各组件间通信的联系，都是通过rabbitmq消息队列中间件实现，所有组件都必须与Keystone组件交互认证与鉴权；

            Rabbitmq：
                MQ  全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法，应用程序通过读写出入队列的消息
                （针对应用程序的数据）来通信，而无需专用连接来链接它们，消息传递指的是程序之间通过在消息中发送数据进行通信，
                而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术，排队指的是应用程序通过队列来通信，
                队列的使用除去了接收和发送应用程序同时执行的要求，Rabbitmq是MQ实现的一个软件；



        Openstack组件间的大致工作流程：（以用户申请虚拟机为例）
            1.在用户登录后，会和Keystone进行一个身份认证，通过认证后，会给用户颁发一个token令牌；
            2.用户带着token向nova请求分配虚拟机；
            3.nova带着token再次向keystone认证，通过认证后，nova向glance请求验证image是否存在；
            4.image带着用户的token再次向keystone请求身份认证，通过认证后，向nova确认可用的image；
            5.nova又带着token向Quantum（Neutron）请求可用的网络，Neutron拿着token又向Keystone请求认证，通过认证后，向nova回馈确认可用的网络；

    