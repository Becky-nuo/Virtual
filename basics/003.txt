
Docker容器技术概述：
    Docker引擎：是一个开源的应用容器引擎，让开发者可以打包应用以及依赖包到
    一个可移植的容器中,然后发布到任何流行的Linux机器上，也可以实现虚拟化，
    容器是完全使用沙箱机制，相互之间没有任何接口。

    Docker容器技术的主要特点：
        快：运行时的性能可以获取极大提升。
        灵活：将应用和系统‘容器化’，不添加额外的系统操作，支持跨OS部署。
        轻便：拥有足够的‘操作系统’仅需添加或减少镜像即可，每台服务器可部署100-1000个实例。
        廉价：版本开源、低成本。
        生态：业界主流IT厂商逐步使用Docker容器技术，开源社区活跃度非常高，逐步成为未来软件发展趋势。


    Docker容器技术使用场景：
        简化配置
        代码流水线(Code Pipeline)管理
        提高开发效率
        隔离应用
        快速管理
        支持多组环境
        整合服务器,降低资源成本


    容器技术架构
    Docker三组件:
        Docker Client:用户界面，支持用户与Docker Daemon之间通信。
        Docker Daemon:运行于主机上，处理服务请求。
        Docker Registry:支持拥有公有与私有访问权限的Docker容器镜像仓库。

    Docker三要素:
        Docker Containers:负责应用程序的运行,包括操作系统、用户添加的文件以及元数据。
        Docker Images:构建容器的只读模板，用来运行Docker容器。
        DockerFile:文件指令集，用来说明如何自动创建Docker镜像。

    Docker总体架构：
        Docker系统使用C/S架构
        Server端驻守在后台：docker daemon 
        Docker client通过REST API请求Docker daemon 来管理Docker的镜像和容器等
        Docker Client是一个CLI程序，可以在命令中通过Docker二进制文件进行交互


    Docker的内部构建
    Docker镜像(Image)：是一个只读的模板。 镜像可以用来创建Docker容器。
        另外Docker提供了一个很简单的机制来创建镜像或者更新现有的镜像，
        用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。

    Docker容器(Container)：Docker利用容器来运行应用。容器是从镜像创建的运行实例，
        它可以被启动、开始、停止、删除。 每个容器都是相互隔离的、保证安全的平台。

    Docker仓库(Repository)：仓库是集中存放镜像文件的场所。仓库注册服务器(Registy). 
        上往往存放着多个仓库,每个仓库中又包含了多个镜像,每个镜像有不同的标签(Tag) 。